// const foo = async () => {
//   await Promise.reject("Reject"); // throw new Error(...)
//   return "Ok";
// };

// foo().then(console.log);

function getStone(stoneName) {
  const stones = {
    –°–º–∞—Ä–∞–≥–¥: {
      price: 1300,
      quantity: 4,
    },
    –î—ñ–∞–º–∞–Ω—Ç: {
      price: 2700,
      quantity: 3,
    },
    –°–∞–ø—Ñ—ñ—Ä: {
      price: 400,
      quantity: 7,
    },
    –©–µ–±—ñ–Ω—å: {
      price: 200,
      quantity: 2,
    },
  };

  return new Promise((resolve) =>
    setTimeout(() => resolve(stones[stoneName]), 500)
  );
}

//PromiseJobs

function getStonesSeq() {
  const emerald = getStone("–°–º–∞—Ä–∞–≥–¥");
  //   const sapphire = getStone("–°–∞–ø—Ñ—ñ—Ä");

  emerald.then((stone) => {
    console.log(stone);
    getStone("–°–∞–ø—Ñ—ñ—Ä").then(console.log);
  });
  //   sapphire.then(console.log);
}

/*
 1. await –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫—ñ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ñ-—Ü—ñ—ó
 2. await –∑–∞–º–æ—Ä–æ–∂—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ —Ç–∏—Ö –ø—ñ—Ä, –ø–æ–∫–∏ –ø—Ä–æ–º—ñ—Å –Ω–µ –ø–µ—Ä–µ–π–¥–µ —É —Å—Ç–∞–Ω Rejected –∞–±–æ Fullfilled (–º–∏ —ñ–º—ñ—Ç—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ—Å—Ç—å —É –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥—É)
 3. await –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–µ –ø—Ä–æ–º—ñ—Å, –∞ –π–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 4. –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ç–∞—î –ø—Ä–æ–º—ñ—Å

*/

async function asyncGetStonesSeq() {
  const emerald = await getStone("–°–º–∞—Ä–∞–≥–¥");
  console.log(emerald);
  const sapphire = await getStone("–°–∞–ø—Ñ—ñ—Ä");
  console.log(sapphire);
  //   throw new Error("hahaha");
}

async function asyncGetStonesAll() {
  const emerald = getStone("–°–º–∞—Ä–∞–≥–¥");
  const sapphire = getStone("–°–∞–ø—Ñ—ñ—Ä");
  const stones = await Promise.all([emerald, sapphire]);
  console.log("üöÄ ~ stones", stones);
  return stones;
}

// asyncGetStonesSeq();
asyncGetStonesAll();
