// const APPLE = { name: "üçé", price: 60, quantity: 0 };
// const BANANA = { name: "üçå", price: 30, quantity: 0 };
// const LEMON = { name: "üçã", price: 40, quantity: 0 };
// const AVOCADO = { name: "ü•ë", price: 20, quantity: 0 };

// const cart = {
//   items: [],

//   addItem(item) {
//     this.items.push(item);
//   },
//   getItems() {
//     return this.items;
//   },
//   increaseQuantity(incresedItem, number) {
//     for (let i = 0; i < this.items.length; i += 1) {
//       if (incresedItem.name === this.items[i].name)
//         this.items[i].quantity += number;
//     }
//     return this.items;
//   },
// };

// cart.addItem(BANANA);
// cart.addItem(LEMON);
// cart.addItem(AVOCADO);

// cart.increaseQuantity(BANANA, 4);
// cart.increaseQuantity(LEMON, 10);
// cart.increaseQuantity(AVOCADO, 8);
// cart.increaseQuantity(AVOCADO, 8);
// cart.increaseQuantity(LEMON, 10);

// console.table(cart.getItems());

// –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –Ω–µ –±—É–¥—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –ø–æ–ª—è —Å–∞–º–æ–≥–æ –æ–± º—î–∫—Ç—É, —è–∫—â–æ –º–∏ –∑–∞—Ö–æ—á–µ–º–æ —ó—Ö –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏, —è–∫ —É –≤–∞—à–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ –∑ –ø–æ–ª–µ–º quantity:

// let { name } = BANANA;
// console.log(name); //üçå
// name = "sdfsdf";
// console.log(name); // sdfsdf
// console.log(BANANA.name); // üçå

// —É –º–µ–Ω–µ –≤—Å–µ –ø—Ä–∞—Ü—é—î –≤ —Ç–∞–∫–æ–º—É –≤–∏–≥–ª—è–¥—ñ, –∞–ª–µ —Ü—ñ–∫–∞–≤–æ —á–æ–º—É –∑ name –≤–∏—Ö–æ–¥–∏—Ç—å –¥–µ—Å—Ç—Ä—É—Ç—É—Ä–∏–∑—É–≤–∞—Ç–∏, –∞ –∑ quantity -–Ω—ñ. –Ø –¥—É–º–∞—é —Ç–æ–º—É, —â–æ —è –Ω–∞–º–∞–≥–∞—é—Å—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è, –∞ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è –¥–ª—è —Ü—å–æ–≥–æ –Ω–µ –ø—ñ–¥—Ö—Ä–¥–∏—Ç—å. (–Ω–µ –∑–∞–≤–∂–¥–∏ —ç —Å–≤—ñ—Ç–ª–æ, —Ç–æ–∂ –¥–∏–≤–ª—é—Å—å —É –∑–∞–ø–∏—Å—ñ... —Å—Ç–æ—Å–æ–≤–Ω–æ  —ñf  –ø–µ—Ä–µ–≤—ñ–∫—Ä–∏ - —Ü–µ —è –ø–µ—Ä–µ–≤—ñ—Ä—è—é —è–∫—â–æ —Ü–µ–π —Ñ—Ä—É–∫—Ç —É–∂–µ —î –≤ –º–∞—Å–∏–≤—ñ - –∑–±—ñ–ª—å—à—É—é –π–æ–º—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ –∑–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ, —è–∫—â–æ –Ω–µ–º–∞—î  - –¥–æ–¥–∞—é –ø–∞—Ä–∞–º–µ—Ç—Ä quantity –∑ —Ü–∏–º —á–∏—Å–ª–æ–º —ñ –¥–æ–¥–∞—é –π–æ–≥–æ —É –º–∞—Å–∏–≤)

//! ================================================

//* Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

//? createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.

//? logProduct(product) - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å

//? logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

// const productList = [
//   {
//     name: "Banana",
//     amount: 5,
//     price: 10,
//   },
//   {
//     name: "Apple",
//     amount: 10,
//     price: 8,
//   },
//   {
//     name: "Cherry",
//     amount: 15,
//     price: 13,
//   },
// ];

// function createProduct(obj, callback) {
//   // 1. –ø—Ä–∏–π–º–∞—î –æ–± º—î–∫—Ç —ñ –ø—Ä–∏–π–º–∞—î –∫–æ–ª–±–µ–∫
//   // 2. —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–± º—î–∫—Ç—É —ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∞–π–¥—ñ
//   // 3. –≤–∏–∫–ª–∏–∫ –∫–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –ø–µ—Ä–µ–¥–∞—á–æ—é —Ç—É–¥–∏ –Ω–æ–≤–æ—Å—Ç–≤–æ—Ä–µ–Ω–Ω–æ–≥–æ –æ–± º—î–∫—Ç—É

//   const newObj = { ...obj, id: Date.now() };
//   callback(newObj);
// }

// function logProduct(product) {
//   console.log(product);
// }

// function logTotalPrice(product) {
//   console.log(product.amount * product.price);
// }

// createProduct(productList[2], logProduct);
// createProduct(productList[2], logTotalPrice);
// createProduct(productList[1], logTotalPrice);

//! ================================================

//* Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

//? –î–æ–¥–∞–π—Ç–µ –æ–±'—î–∫—Ç account –º–µ—Ç–æ–¥–∏ withdraw(amount, onSuccess, onError) —Ç–∞ deposit(amount, onSuccess, onError), –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞ –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–ª–±–µ–∫–∏.

//? –ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ this.balance, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

//? –ú–µ—Ç–æ–¥ deposit –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: "Alex",
//   balance: 2000,
//   withdraw(amount, onSuccess, onError) {
//     if (amount > this.balance) {
//       onError(
//         `–ù–∞ –∂–∞–ª—å, –Ω–∞ –≤–∞—à–æ–º—É –±–∞–ª–∞–Ω—Å—ñ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤! –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${this.balance}`
//       );
//     } else if (amount >= TRANSACTION_LIMIT) {
//       onError(
//         `–ù–∞ –∂–∞–ª—å, –≤–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –ª—ñ–º—ñ—Ç! –ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ–º—ñ—Ç: ${TRANSACTION_LIMIT}`
//       );
//     } else {
//       this.balance -= amount;
//       onSuccess(`–ì—Ä–æ—à—ñ –∑–Ω—è—Ç–æ! –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${this.balance}`);
//     }
//   },
//   deposit(amount, onSuccess, onError) {
//     if (amount <= 0) {
//       onError("–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–∞ –Ω—É–ª—è!");
//     } else if (amount >= TRANSACTION_LIMIT) {
//       onError(
//         `–ù–∞ –∂–∞–ª—å, –≤–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –ª—ñ–º—ñ—Ç! –ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ–º—ñ—Ç: ${TRANSACTION_LIMIT}`
//       );
//     } else {
//       this.balance += amount;
//       onSuccess(`–ì—Ä–æ—à—ñ –ø–æ–∫–ª–∞–¥–µ–Ω–æ –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫! –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${this.balance}`);
//     }
//   },
// };

// function onSuccess(message) {
//   console.log(`–£—Å–ø—ñ—à–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è! ${message}`);
// }

// function onError(message) {
//   console.log(`–ü–æ–º–∏–ª–∫–∞! ${message}`);
// }

// account.withdraw(5000, onSuccess, onError);
// account.withdraw(1000, onSuccess, onError);
// account.withdraw(950, onSuccess, onError);

// account.deposit(10000, onSuccess, onError);
// account.deposit(-10, onSuccess, onError);
// account.deposit(300, onSuccess, onError);

//! ================================================

//* Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É. –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.

// function each(array, callback) {
//   //1. –°—Ç–≤–æ—Ä–∏–º–æ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤
//   //2. –ø–µ—Ä–µ–±—Ä–∞—Ç–∏ –º–∞—Å—Å–∏–≤ array –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü–∏–∫–ª—É
//   //3. –≤–∏–∫–ª–∏–∫ –∫–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞ –∫–æ–∂–Ω–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ –º–∞—Å–∏–≤—É array
//   //4. –¥–æ–¥–æ—î–º–æ –≤–∏–¥–æ–∑–º—ñ–Ω–µ–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –≤ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤
//   //5. –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤

//   const modifiedArr = [];

//   for (const el of array) {
//     const modifiedEl = callback(el);
//     modifiedArr.push(modifiedEl); // modifiedArr.push(callback(el));
//   }
//   return modifiedArr;
// }

// const arr = [1, 2, 3, 4, 5];

// console.log(each(arr, pow)); // [1,4,9,16,25]
// console.log(each(arr, addOne));
// console.log(each(arr, (num) => num / 2));

// function pow(num) {
//   return num ** 2;
// }

// function addOne(num) {
//   return num + 1;
// }

//! ================================================

//* Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// const productList = [
//   {
//     name: "Banana",
//     amount: 5,
//     price: 10,
//   },
//   {
//     name: "Apple",
//     amount: 10,
//     price: 8,
//   },
//   {
//     name: "Cherry",
//     amount: 15,
//     price: 13,
//   },
// ];

// // function createProduct(obj, callback) {
// //   const newObj = { ...obj, id: Date.now() };
// //   callback(newObj);
// // }

// const createProduct = (obj, callback) => {
//   const newObj = { ...obj, id: Date.now() };
//   callback(newObj);
// };

// const createProduct = (obj, callback) => callback({ ...obj, id: Date.now() });

// // function logProduct(product) {
// //   console.log(product);
// // }

// const logProduct = (product) => console.log(product);

// const logTotalPrice = (product) => console.log(product.amount * product.price);

// // function logTotalPrice(product) {
// //   console.log(product.amount * product.price);
// // }

// createProduct(productList[2], logProduct);
// createProduct(productList[2], logTotalPrice);
// createProduct(productList[1], logTotalPrice);

//! ================================================

// function showArgs() {
//   console.log(arguments);
// }

// showArgs(1, 5, 8, 13, 2);

//! ================================================

//* Example 9 - –ú–µ—Ç–æ–¥ forEach
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

function cal—ÅulateAverage(...args) {
  let total = 0;
  //   for (let i = 0; i < args.length; i++) {
  //     total += args[i];
  //   }
  args.forEach(el => (total += el));
  return total / args.length;
}

console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
console.log(cal—ÅulateAverage(14, 8, 2)); // 8
console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2
