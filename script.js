// "use strict";

// const obj = {
//   objInside: {
//     showCxtInside: () => console.log(this),
//   },
//   showCxtOutside: () => console.log(this),
// };

// console.log(obj.showCxtOutside());
// console.log(obj.objInside.showCxtInside());

//!========================================

// const tweets = [
//   { id: "000", likes: 5, tags: ["js", "nodejs"] },
//   { id: "001", likes: 2, tags: ["html", "css"] },
//   { id: "002", likes: 17, tags: ["html", "js", "nodejs"] },
//   { id: "003", likes: 8, tags: ["css", "react"] },
//   { id: "004", likes: 0, tags: ["js", "nodejs", "react"] },
// ];

// const getTags = (tweets) =>
//   tweets.reduce((allTags, tweet) => {
//     allTags.push(...tweet.tags);

//     return allTags;
//   }, []);

// const tags = getTags(tweets);
// console.log("üöÄ ~ tags", tags);

// const uniqueTags = tags.reduce((acc, tag) => {
//   if (!acc.includes(tag)) acc.push(tag);
//   return acc;
// }, []);
// console.log("üöÄ ~ uniqueTags", uniqueTags);

// // –í–∏–Ω–µ—Å–µ–º–æ callback-—Ñ—É–Ω–∫—Ü—ñ—é –æ–∫—Ä–µ–º–æ, –∞ –≤ reduc–µ –ø–µ—Ä–µ–¥–∞–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–µ—ó.
// // –¶–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞, —è–∫—â–æ callback-—Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å–∏—Ç—å –≤–µ–ª–∏–∫–∞.

// // –Ø–∫—â–æ –≤ –æ–±'—î–∫—Ç—ñ-–∞–∫—É–º—É–ª—è—Ç–æ—Ä—ñ acc –≤—ñ–¥—Å—É—Ç–Ω—è —Å–≤–æ—è –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –∑ –∫–ª—é—á–µ–º tag,
// // —Ç–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó —ñ –∑–∞–ø–∏—Å—É—î–º–æ —ó–π –∑–Ω–∞—á–µ–Ω–Ω—è 0.
// // –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –∑–±—ñ–ª—å—à—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ 1.
// const getTagStats = (acc, tag) => {
//   if (!acc.hasOwnProperty(tag)) {
//     acc[tag] = 0;
//   }

//   acc[tag] += 1;

//   return acc;
// };

// /*
//     1. (acc = {}, tag="js") => {
//         if (!acc.hasOwnProperty(tag)) { true
//             acc[tag] = 0; -> acc["js"] = 0 -> {js: 0}
//         }

//         acc[tag] += 1;
//         => acc["js"] += 1 => {js: 1}

//         return acc; => {js: 1}
//     }

//     2. (acc = {js: 1}, tag="nodejs") => {
//         if (!acc.hasOwnProperty(tag)) { true
//             acc[tag] = 0; -> acc["nodejs"] = 0 -> {nodejs: 0, js: 1}
//         }

//         acc[tag] += 1;
//         => acc["nodejs"] += 1 => {nodejs: 1, js: 1}

//         return acc; => {nodejs: 1, js: 1}
//     }

//     6. (acc = {nodejs: 1, js: 1, html: 2, css: 1}, tag="js") => {
//         if (!acc.hasOwnProperty(tag)) { false
//           -------
//         }

//         acc[tag] += 1;
//         => acc["js"] += 1 => {nodejs: 1, js: 2, html: 2, css: 1}

//         return acc; => {nodejs: 1, js: 2, html: 2, css: 1}
//     }
// };

// */

// // –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞ - —Ü–µ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–±'—î–∫—Ç {}
// const countTags = (tags) => tags.reduce(getTagStats, {});

// /*

// const countTags = (tags) => tags.reduce((acc, tag) => {
//   if (!acc.hasOwnProperty(tag)) {
//     acc[tag] = 0;
//   }

//   acc[tag] += 1;

//   return acc;
// }, {});

// */

// const tagCount = countTags(tags);
// console.log(tagCount);

//!========================================

//* Example 1 - –ú–∞–π—Å—Ç–µ—Ä–Ω—è –∫–æ—à—Ç–æ–≤–Ω–æ—Å—Ç–µ–π
// –ù–∞–ø–∏—à—ñ—Ç—å –º–µ—Ç–æ–¥ calcTotalPrice(stoneName), —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –Ω–∞–∑–≤—É –∫–∞–º–µ–Ω—é —ñ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∫–∞–º–µ–Ω—ñ–≤ –∑ —Ç–∞–∫–∏–º —ñ–º'—è–º, —Ü—ñ–Ω–æ—é —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ stones.

// const chopShop = {
//   stones: [
//     { name: "Emerald", price: 1300, quantity: 4 },
//     { name: "Diamond", price: 2700, quantity: 3 },
//     { name: "Sapphire", price: 1400, quantity: 7 },
//     { name: "Ruby", price: 800, quantity: 2 },
//   ],
//   calcTotalPrice(stoneName) {
//     const currentStone = this.stones.find(({ name }) => stoneName === name);

//     // const { price, quantity } = currentStone;

//     // return price * quantity;

//     return currentStone.price * currentStone.quantity;
//   },
// };

// // chopShop === this
// console.log(chopShop.calcTotalPrice("Emerald")); // 5200
// console.log(chopShop.calcTotalPrice("Diamond")); // 8100
// console.log(chopShop.calcTotalPrice("Sapphire")); // 9800
// console.log(chopShop.calcTotalPrice("Ruby")); // 1600

// // function calcTotalPrice(stoneName) {
// //   console.log(this);
// //   const currentStone = this.stones.find(({ name }) => stoneName === name);

// //   // const { price, quantity } = currentStone;

// //   // return price * quantity;

// //   return currentStone.price * currentStone.quantity;
// // }

// // console.log(calcTotalPrice.call(chopShop, "Emerald"));

//!========================================

//* Example 2 - –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞ –∫–Ω–∏–≥–∞
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç–æ–¥—ñ–≤ –æ–±'—î–∫—Ç—É phonebook —â–æ–± –∫–æ–¥ –∑–∞–ø—Ä–∞—Ü—é–≤–∞–≤.

// const phonebook = {
//   contacts: [],
//   add(contact) {
//     const newContact = {
//       list: "default",
//       ...contact,
//       showCtx() {
//         console.log(this);
//       },
//       id: this.generateId(),
//       createdAt: this.getDate(),
//       //   id: phonebook.generateId(),
//       //   createdAt: phonebook.getDate(),
//     };

//     console.dir(newContact);

//     console.log(newContact.showCtx.call(phonebook)); // phonebook -> this
//     console.log(newContact.showCtx()); // newContact -> this
//     this.contacts.push(newContact);
//     return this.contacts;
//   },
//   generateId() {
//     return "_" + Math.random().toString(36).substr(2, 9);
//   },
//   getDate() {
//     return Date.now();
//   },
// };

// console.log(
//   phonebook.add({
//     name: "Mango",
//     email: "mango@mail.com",
//     list: "friends",
//   })
// );
// console.log(
//   phonebook.add({
//     name: "Poly",
//     email: "poly@hotmail.com",
//   })
// );

/*
    1. this –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –Ω–µ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó, –∞ –ø—Ä–∏ —ó—ó –≤–∏–∫–ª–∏–∫—É
    2. this - —Ü–µ –æ–± º—î–∫—Ç, —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü—ñ—é/–º–µ—Ç–æ–¥
*/

//!========================================

//* Example 3 - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
// –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç calculator –∑ —Ç—Ä—å–æ–º–∞ –º–µ—Ç–æ–¥–∞–º–∏:

// read(a, b)- –ø—Ä–∏–π–º–∞—î –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î —ó—Ö —è–∫ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –æ–±'—î–∫—Ç–∞.
// add() - –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É–º—É –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å.
// mult() - –ø–µ—Ä–µ–º–Ω–æ–∂—É—î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

// const calculator = {
//   a: 0,
//   b: 0,
//   read(a, b) {
//     this.a = a;
//     this.b = b;
//   },
//   add() {
//     return this.a + this.b;
//   },
//   mult() {
//     return this.a * this.b;
//   },
// };

// calculator.read(5, 10);
// console.log(calculator);
// console.log(calculator.add()); // 15
// console.log(calculator.mult()); // 50

//!========================================

// "use strict";
// function globalFunc() {
//   console.log(this);
// }
// const globalArrowFunc = () => {
//   console.log(this);
// };

// console.log(this); // ?
// globalFunc(); // ?
// globalArrowFunc(); // ?

//!========================================

// "use strict";

// const user = {
//   name: "Bob",
//   userThis: {
//     thisUser: this,
//   },
//   func() {
//     console.log(this);
//     // const arrowFunc = () => {
//     //   console.log(this);
//     // };
//     // console.log(arrowFunc());
//   },
//   arrowFunc: () => {
//     console.log(this);
//   },
// };

// console.log(user.userThis.thisUser);
// console.log(user.userThis); // ?
// user.func(); // ?
// user.arrowFunc(); // ?

//!========================================

const hotel = {
  username: "Resort hotel",
  showThis() {
    const foo = () => {
      // –°—Ç—Ä—ñ–ª–∫–∏ –∑–∞–ø–∞–º'—è—Ç–æ–≤—É—é—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—ñ–¥ —á–∞—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
      // –∑ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ
      console.log("this in foo: ", this);
    };

    foo();
    console.log("this in showThis: ", this);
  },
};

hotel.showThis();
// this in foo: {username: 'Resort hotel', showThis: ∆í}
// this in showThis: {username: 'Resort hotel',showThis: ∆í}
